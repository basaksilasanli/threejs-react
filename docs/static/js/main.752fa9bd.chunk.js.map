{"version":3,"sources":["Mavi_sandalye.glb","components/Plane.js","components/Chair.js","components/ControlButtons.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Plane","position","receiveShadow","castShadow","attach","args","color","Chair","gltf","useLoader","GLTFLoader","chairGlb","chairMeshGroup","useRef","clothMaterial","MeshStandardMaterial","scene","children","material","useFrame","current","rotation","y","x","Math","sin","ref","object","scale","Button","styled","button","props","default","Wrapper","div","ControlButtons","parentCallback","onClick","Container","App","useState","setColor","id","shadowMap","intensity","fallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,2C,yMCC5B,SAASC,EAAT,GAA+B,IAAbC,EAAY,EAAZA,SAChC,OACC,0BAAMA,SAAUA,EAAUC,eAAa,EAACC,YAAU,GACjD,uCAAmBC,OAAO,WAAWC,KAAM,CAAC,EAAG,GAAK,KACpD,0CAAuBD,OAAO,WAAWE,MAAO,aCEpC,SAASC,EAAT,GAAyB,IAATD,EAAQ,EAARA,MACxBE,EAAOC,YAAWC,IAAYC,KAC9BC,EAAiBC,mBAEjBC,EAAgB,IAAIC,uBAAJ,eAClBP,EAAKQ,MAAMC,SAAS,GAAGA,SAAS,GAAGA,SAAS,GAAGA,SAAS,GAAGA,SAAS,GAAGC,SADrD,CAErBZ,MAAMA,KAMP,OAJAE,EAAKQ,MAAMC,SAAS,GAAGA,SAAS,GAAGA,SAAS,GAAGA,SAAS,GAAGA,SAAS,GAAGC,SAAWJ,EAClFN,EAAKQ,MAAMC,SAAS,GAAGA,SAAS,GAAGA,SAAS,GAAGA,SAAS,GAAGA,SAAS,GAAGC,SAAWJ,EAElFK,aAAS,kBAAOP,EAAeQ,QAAQC,SAASC,GAAK,IAAOV,EAAeQ,QAAQC,SAASE,EAAIC,KAAKC,IAAIb,EAAeQ,QAAQC,SAASC,GAAG,KAE1I,0BAAMI,IAAKd,GACT,+BACCe,OAAQnB,EAAKQ,MACbf,SAAU,CAAC,GAAI,EAAG,GAClB2B,MAAO,CAAC,EAAE,EAAE,KAEd,kBAAC5B,EAAD,CAAOC,SAAU,CAAC,GAAI,EAAG,M,oXCvB7B,IAAM4B,EAASC,IAAOC,OAAV,KACI,SAAAC,GAAK,OAAIA,EAAMC,QAAU,gBAAkB,WAChD,SAAAD,GAAK,OAAIA,EAAMC,QAAU,QAAU,mBAOxCC,EAAUJ,IAAOK,IAAV,KAME,SAASC,EAAT,GAA6C,IAAnBC,EAAkB,EAAlBA,eACxC,OACC,kBAACH,EAAD,KACC,kBAACL,EAAD,CAAQS,QAAS,kBAAMD,EAAe,SAAtC,OAGA,kBAACR,EAAD,CAAQS,QAAS,kBAAMD,EAAe,YAAtC,UAGA,kBAACR,EAAD,CAAQI,SAAO,EAACK,QAAS,kBAAMD,EAAe,aAA9C,Y,sFCrBH,IAAME,EAAYT,IAAOK,IAAV,KAoBAK,MAhBf,WAAgB,IAAD,EACaC,qBADb,mBACNnC,EADM,KACCoC,EADD,KAKb,OACE,kBAACH,EAAD,KACE,kBAAC,IAAD,CAAQI,GAAI,SAAUC,WAAS,GAC7B,kCAActC,MAAO,YACrB,gCAAYuC,UAAW,EAAGvC,MAAO,UAAWL,SAAU,CAAC,EAAG,EAAG,GAAIE,YAAU,IAC3E,kBAAC,WAAD,CAAU2C,SAAU,MAAM,kBAACvC,EAAD,CAAOD,MAAOA,MAE1C,kBAAC8B,EAAD,CAAgBC,eAVA,SAAC/B,GACpBoC,EAASpC,QCDQyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.752fa9bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Mavi_sandalye.e973b1a3.glb\";","import React from \"react\";\nexport default function Plane ({ position }) {\n\treturn (\n\t\t<mesh position={position} receiveShadow castShadow>\n\t\t\t<boxBufferGeometry attach=\"geometry\" args={[4, 0.1, 4]}/>\n\t\t\t<meshStandardMaterial  attach=\"material\" color={\"#414141\"} />\n\t\t</mesh>\n\t)\n}","import React, {useRef} from \"react\";\nimport {useFrame, useLoader, } from \"react-three-fiber\";\nimport {MeshStandardMaterial} from 'three';\nimport chairGlb from \"../Mavi_sandalye.glb\";\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport Plane from './Plane';\n\nexport default function Chair({color}) {\n\tconst gltf = useLoader( GLTFLoader, chairGlb);\n\tconst chairMeshGroup = useRef();\n\n\tconst clothMaterial = new MeshStandardMaterial({\n\t\t...gltf.scene.children[0].children[0].children[0].children[0].children[0].material,\n\t\tcolor:color,\n\t});\n\tgltf.scene.children[0].children[0].children[0].children[0].children[0].material = clothMaterial;\n\tgltf.scene.children[0].children[0].children[0].children[0].children[2].material = clothMaterial;\n\n\tuseFrame(() => (chairMeshGroup.current.rotation.y += 0.01 , chairMeshGroup.current.rotation.x = Math.sin(chairMeshGroup.current.rotation.y)/3));\n\treturn (\n\t\t\t<mesh ref={chairMeshGroup}>\n\t\t\t\t\t<primitive\n\t\t\t\t\t\tobject={gltf.scene}\n\t\t\t\t\t\tposition={[0, -2, 0]}\n\t\t\t\t\t\tscale={[4,4,4]}\n\t\t\t\t\t/>\n\t\t\t\t<Plane position={[0, -2, 0]}/>\n\t\t\t</mesh>\n\t)\n}","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Button = styled.button`\n  background: ${props => props.default ? \"palevioletred\" : \"white\"};\n  color: ${props => props.default ? \"white\" : \"palevioletred\"};\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\nconst Wrapper = styled.div`\n display:flex;\n align-items:center;\n justify-content: center;;\n`;\n\nexport default function ControlButtons({ parentCallback }) {\n\treturn (\n\t\t<Wrapper>\n\t\t\t<Button onClick={() => parentCallback('red')}>\n\t\t\t\tRed\n\t\t\t</Button>\n\t\t\t<Button onClick={() => parentCallback('yellow')}>\n\t\t\t\tYellow\n\t\t\t</Button>\n\t\t\t<Button default onClick={() => parentCallback('default')}>\n\t\t\t\tDefault\n\t\t\t</Button>\n\t\t</Wrapper>\n\t)\n\n\n}","import React, {Suspense, useState} from 'react'\nimport {Canvas} from 'react-three-fiber'\nimport Chair from \"./components/Chair\";\nimport ControlButtons from \"./components/ControlButtons\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n height:90vh;\n`;\n\nfunction App() {\n  const [color, setColor] = useState();\n  const changeColor = (color) => {\n   setColor(color)\n  };\n  return (\n    <Container>\n      <Canvas id={\"canvas\"} shadowMap>\n        <ambientLight color={\"#ffffff\"} />\n        <pointLight intensity={3} color={\"#ffffff\"} position={[2, 4, 2]} castShadow />\n        <Suspense fallback={null}><Chair color={color}/></Suspense>\n      </Canvas>\n      <ControlButtons parentCallback={changeColor}/>\n    </Container>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}